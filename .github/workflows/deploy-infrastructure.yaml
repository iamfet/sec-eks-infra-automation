name: Deploy Infrastructure

on:
  push:
    branches: [main]
    paths: 
      - "**.tf"
      - "!backend/**"
  pull_request:
    branches: [main]
    paths:
      - "**.tf"
      - "!backend/**"

env:
  TF_VERSION: "1.12.0"
  TF_IN_AUTOMATION: true

permissions:
  contents: read # Required to checkout the repository
  pull-requests: write # Required for OIDC authentication
  id-token: write # Required to comment on PRs

jobs:
  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Create Terraform plugin cache directory
        run: mkdir -p ~/.terraform.d/plugin-cache

      - name: Cache Terraform
        uses: actions/cache@v4.2.3
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Init
        run: terraform init -backend=false

      - name: Terraform Validate
        run: terraform validate

  tfsec-security-scan:
    name: tfsec Security Scan
    runs-on: ubuntu-latest
    needs: terraform-validate
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          soft_fail: true

  chekov-security-scan:
    name: Chekov Security Scan
    runs-on: ubuntu-latest
    needs: terraform-validate
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform
          soft_fail: true

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [tfsec-security-scan, chekov-security-scan]
    outputs:
      plan-outcome: ${{ steps.plan.outcome }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Restore Terraform Cache
        uses: actions/cache@v4.2.3
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ACTIONS_AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-session-name: GitHubActions-InfraDeploy

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -input=false -out=tfplan \
            -var="user_for_admin_role=${{ secrets.ADMIN_USER_ARN }}" \
            -var="user_for_dev_role=${{ secrets.DEV_USER_ARN }}" \
            | tee plan_output.txt
        continue-on-error: true

      - name: Upload Plan
        uses: actions/upload-artifact@v4.6.2
        with:
          name: tfplan
          path: tfplan
          retention-days: 5

      - name: Comment PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const planOutput = fs.readFileSync('plan_output.txt', 'utf8');
            
            const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${planOutput}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  apply:
    name: Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.terraform-plan.outputs.plan-outcome == 'success'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Restore Terraform Cache
        uses: actions/cache@v4.2.3
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ACTIONS_AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-session-name: GitHubActions

      - name: Download Plan
        uses: actions/download-artifact@v4.3.0
        with:
          name: tfplan

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Extract Cluster Name
        run: |
          CLUSTER_NAME=$(terraform output -raw cluster_name || echo "")
          echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV

      - name: Verify Deployment
        if: env.CLUSTER_NAME != ''
        run: |
          aws eks update-kubeconfig --name $CLUSTER_NAME --region ${{ vars.AWS_REGION }}
          kubectl get nodes
          kubectl get pods --all-namespaces

      - name: Apply ArgoCD Applications
        if: env.CLUSTER_NAME != ''
        run: |
          kubectl apply -f argocd-apps/online-boutique-argo-app.yaml
          kubectl apply -f argocd-apps/cluster-resources-argo-app.yaml
          kubectl apply -f argocd-apps/defectdojo-argo-app.yaml